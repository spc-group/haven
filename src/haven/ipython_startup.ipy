import asyncio
import logging
import time

import databroker  # noqa: F401
from bluesky import plan_stubs as bps  # noqa: F401
from bluesky.plan_stubs import mv, mvr, rd  # noqa: F401
from bluesky import plans as bp  # noqa: F401
from bluesky import preprocessors as bpp  # noqa: F401
from bluesky import suspenders  # noqa: F401
from bluesky.callbacks.best_effort import BestEffortCallback  # noqa: F401
from bluesky.run_engine import RunEngine, call_in_bluesky_event_loop  # noqa: F401
from bluesky.simulators import summarize_plan  # noqa: F401
from ophyd_async.core import NotConnected
from ophydregistry import ComponentNotFound
from rich import print
from rich.align import Align
from rich.console import Console
from rich.panel import Panel
from rich.theme import Theme

import haven  # noqa: F401
from haven import plans  # noqa: F401

logging.basicConfig(level=logging.WARNING)

log = logging.getLogger(__name__)

# Load the Tiled catalog for reading data back outline
catalog = haven.tiled_client()

# Create a run engine
RE = haven.run_engine(
    connect_kafka=True,
    call_returns_result=True,
    use_bec=False,
)


# Prepare the haven instrument
config = haven.load_config()
t0 = time.monotonic()
print(f"Initializing [bold cyan]{config['beamline']['name']}[/]…", flush=True)
loader_exception = None
haven.beamline.load()
try:
    call_in_bluesky_event_loop(haven.beamline.connect())
except NotConnected as exc:
    log.exception(exc)
    # Save the exception so we can alert the user later
    loader_exception = exc
num_devices = len(haven.beamline.devices.root_devices)
print(f"Connected to {num_devices} devices in {time.monotonic() - t0:.2f} seconds.", flush=True)

# Save references to all the devices in the global namespace
devices = haven.beamline.devices
ion_chambers = devices.findall("ion_chambers", allow_none=True)
for cpt in devices._objects_by_name.values():
    # Replace spaces and other illegal characters in variable name
    name = haven.sanitize_name(cpt.name)
    # Add the device as a variable in module's globals
    globals().setdefault(name, cpt)

# Print helpful information to the console
custom_theme = Theme(
    {
        "code": "white on grey27",
    }
)
console = Console(theme=custom_theme)
motd = (
    "[bold]Devices[/bold] are available directly by name or though the [italic]devices[/italic].\n"
    " ┣━ [code]m2 = sim_motor_2[/]\n"
    " ┃    —or—\n"
    " ┗━ [code]m2 = devices['sim_motor_2'][/]\n"
    "\n"
    "[bold]Haven plans and plan-stubs[/bold] are available as "
    "[italic]plans[/].\n"
    " ┗━ [code]plan = plans.xafs_scan(ion_chambers, -50, 100, 1, E0=8333)[/]\n"
    "\n"
    "The [bold]RunEngine[/bold] is available as [italic]RE[/italic].\n"
    " ┗━ [code]RE(bps.mv(m2, 2))[/code]\n"
    "\n"
    "The run engine is also registered as the transform [italic]<[/].\n"
    " ┣━ [code]<mv(m, 2)[/code] (absolute move)\n"
    " ┣━ [code]<mvr(m, 2)[/code] (relative move)\n"
    " ┗━ [code]<rd(m)[/code] (read)\n"
    "\n"
    "Run [code]help(haven)[/code] for more information."
)
print("")  # Blank line for separation
console.print(
    Panel(
        motd,
        title="Welcome to the [bold purple]Haven[/] beamline control system.",
        subtitle="[link=https://haven-spc.readthedocs.io/en/latest/]haven-spc.readthedocs.io[/]",
        expand=False,
    )
)

# Make an alert in case devices did not connect properly
if loader_exception is not None:
    console.print(Align.center("\n[bold red][blink]:fire:[/] Some devices did not connect properly! See logs for details. [blink]:fire:[/][/]"))
